// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Quantum.Jobs.Models;
using Azure.ResourceManager;

namespace Azure.Quantum.Jobs
{
    /// <summary> A class to add extension methods to ResourceGroupResource. </summary>
    internal partial class ResourceGroupResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _jobsClientDiagnostics;
        private JobsRestOperations _jobsRestClient;
        private ClientDiagnostics _providersClientDiagnostics;
        private ProvidersRestOperations _providersRestClient;
        private ClientDiagnostics _storageClientDiagnostics;
        private StorageRestOperations _storageRestClient;
        private ClientDiagnostics _quotasClientDiagnostics;
        private QuotasRestOperations _quotasRestClient;
        private ClientDiagnostics _sessionsClientDiagnostics;
        private SessionsRestOperations _sessionsRestClient;
        private ClientDiagnostics _topLevelItemsClientDiagnostics;
        private TopLevelItemsRestOperations _topLevelItemsRestClient;

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupResourceExtensionClient"/> class for mocking. </summary>
        protected ResourceGroupResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ResourceGroupResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics JobsClientDiagnostics => _jobsClientDiagnostics ??= new ClientDiagnostics("Azure.Quantum.Jobs", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private JobsRestOperations JobsRestClient => _jobsRestClient ??= new JobsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics ProvidersClientDiagnostics => _providersClientDiagnostics ??= new ClientDiagnostics("Azure.Quantum.Jobs", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ProvidersRestOperations ProvidersRestClient => _providersRestClient ??= new ProvidersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics StorageClientDiagnostics => _storageClientDiagnostics ??= new ClientDiagnostics("Azure.Quantum.Jobs", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private StorageRestOperations StorageRestClient => _storageRestClient ??= new StorageRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics QuotasClientDiagnostics => _quotasClientDiagnostics ??= new ClientDiagnostics("Azure.Quantum.Jobs", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private QuotasRestOperations QuotasRestClient => _quotasRestClient ??= new QuotasRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SessionsClientDiagnostics => _sessionsClientDiagnostics ??= new ClientDiagnostics("Azure.Quantum.Jobs", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SessionsRestOperations SessionsRestClient => _sessionsRestClient ??= new SessionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics TopLevelItemsClientDiagnostics => _topLevelItemsClientDiagnostics ??= new ClientDiagnostics("Azure.Quantum.Jobs", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private TopLevelItemsRestOperations TopLevelItemsRestClient => _topLevelItemsRestClient ??= new TopLevelItemsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// List jobs.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs
        /// Operation Id: Jobs_List
        /// </summary>
        /// <param name="filter"> OData filter expression supporting eq operator on id, name, providerId, target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime. </param>
        /// <param name="maxpagesize"> The maxpagesize parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="JobDetails" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<JobDetails> GetJobsAsync(string filter = null, long? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<JobDetails>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = JobsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetJobs");
                scope.Start();
                try
                {
                    var response = await JobsRestClient.ListAsync(Id.SubscriptionId, filter, pageSizeHint, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<JobDetails>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = JobsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetJobs");
                scope.Start();
                try
                {
                    var response = await JobsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, filter, pageSizeHint, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List jobs.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs
        /// Operation Id: Jobs_List
        /// </summary>
        /// <param name="filter"> OData filter expression supporting eq operator on id, name, providerId, target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime. </param>
        /// <param name="maxpagesize"> The maxpagesize parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="JobDetails" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<JobDetails> GetJobs(string filter = null, long? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Page<JobDetails> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = JobsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetJobs");
                scope.Start();
                try
                {
                    var response = JobsRestClient.List(Id.SubscriptionId, filter, pageSizeHint, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<JobDetails> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = JobsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetJobs");
                scope.Start();
                try
                {
                    var response = JobsRestClient.ListNextPage(nextLink, Id.SubscriptionId, filter, pageSizeHint, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get job by id
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}
        /// Operation Id: Jobs_Get
        /// </summary>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<JobDetails>> GetJobAsync(string jobId, CancellationToken cancellationToken = default)
        {
            using var scope = JobsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetJob");
            scope.Start();
            try
            {
                var response = await JobsRestClient.GetAsync(Id.SubscriptionId, jobId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get job by id
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}
        /// Operation Id: Jobs_Get
        /// </summary>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<JobDetails> GetJob(string jobId, CancellationToken cancellationToken = default)
        {
            using var scope = JobsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetJob");
            scope.Start();
            try
            {
                var response = JobsRestClient.Get(Id.SubscriptionId, jobId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a job.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}
        /// Operation Id: Jobs_Create
        /// </summary>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="details"> The complete metadata of the job to submit. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<JobDetails>> CreateJobAsync(string jobId, JobDetails details, CancellationToken cancellationToken = default)
        {
            using var scope = JobsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.CreateJob");
            scope.Start();
            try
            {
                var response = await JobsRestClient.CreateAsync(Id.SubscriptionId, jobId, details, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a job.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}
        /// Operation Id: Jobs_Create
        /// </summary>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="details"> The complete metadata of the job to submit. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<JobDetails> CreateJob(string jobId, JobDetails details, CancellationToken cancellationToken = default)
        {
            using var scope = JobsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.CreateJob");
            scope.Start();
            try
            {
                var response = JobsRestClient.Create(Id.SubscriptionId, jobId, details, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Cancel a job.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}
        /// Operation Id: Jobs_Cancel
        /// </summary>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CancelJobAsync(string jobId, CancellationToken cancellationToken = default)
        {
            using var scope = JobsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.CancelJob");
            scope.Start();
            try
            {
                var response = await JobsRestClient.CancelAsync(Id.SubscriptionId, jobId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Cancel a job.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}
        /// Operation Id: Jobs_Cancel
        /// </summary>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CancelJob(string jobId, CancellationToken cancellationToken = default)
        {
            using var scope = JobsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.CancelJob");
            scope.Start();
            try
            {
                var response = JobsRestClient.Cancel(Id.SubscriptionId, jobId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Patch a job.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}
        /// Operation Id: Jobs_Patch
        /// </summary>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="content"> The json patch document containing the patch operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<JobDetails>> PatchJobAsync(string jobId, IEnumerable<Models.JsonPatchDocument> content, CancellationToken cancellationToken = default)
        {
            using var scope = JobsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.PatchJob");
            scope.Start();
            try
            {
                var response = await JobsRestClient.PatchAsync(Id.SubscriptionId, jobId, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Patch a job.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}
        /// Operation Id: Jobs_Patch
        /// </summary>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="content"> The json patch document containing the patch operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<JobDetails> PatchJob(string jobId, IEnumerable<Models.JsonPatchDocument> content, CancellationToken cancellationToken = default)
        {
            using var scope = JobsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.PatchJob");
            scope.Start();
            try
            {
                var response = JobsRestClient.Patch(Id.SubscriptionId, jobId, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get provider status.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/providerStatus
        /// Operation Id: Providers_GetStatus
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ProviderStatus" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ProviderStatus> GetStatusProvidersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ProviderStatus>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProvidersClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetStatusProviders");
                scope.Start();
                try
                {
                    var response = await ProvidersRestClient.GetStatusAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ProviderStatus>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProvidersClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetStatusProviders");
                scope.Start();
                try
                {
                    var response = await ProvidersRestClient.GetStatusNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get provider status.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/providerStatus
        /// Operation Id: Providers_GetStatus
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ProviderStatus" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ProviderStatus> GetStatusProviders(CancellationToken cancellationToken = default)
        {
            Page<ProviderStatus> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProvidersClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetStatusProviders");
                scope.Start();
                try
                {
                    var response = ProvidersRestClient.GetStatus(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ProviderStatus> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProvidersClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetStatusProviders");
                scope.Start();
                try
                {
                    var response = ProvidersRestClient.GetStatusNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a URL with SAS token for a container/blob in the storage account associated with the workspace. The SAS URL can be used to upload job input and/or download job output.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/storage/sasUri
        /// Operation Id: Storage_SasUri
        /// </summary>
        /// <param name="details"> The details (name and container) of the blob to store or download data. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SasUriResponse>> SasUriStorageAsync(BlobDetails details, CancellationToken cancellationToken = default)
        {
            using var scope = StorageClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.SasUriStorage");
            scope.Start();
            try
            {
                var response = await StorageRestClient.SasUriAsync(Id.SubscriptionId, details, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a URL with SAS token for a container/blob in the storage account associated with the workspace. The SAS URL can be used to upload job input and/or download job output.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/storage/sasUri
        /// Operation Id: Storage_SasUri
        /// </summary>
        /// <param name="details"> The details (name and container) of the blob to store or download data. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SasUriResponse> SasUriStorage(BlobDetails details, CancellationToken cancellationToken = default)
        {
            using var scope = StorageClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.SasUriStorage");
            scope.Start();
            try
            {
                var response = StorageRestClient.SasUri(Id.SubscriptionId, details, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List quotas for the given workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/quotas
        /// Operation Id: Quotas_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Quota" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Quota> GetAllQuotaAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Quota>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = QuotasClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAllQuota");
                scope.Start();
                try
                {
                    var response = await QuotasRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Quota>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = QuotasClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAllQuota");
                scope.Start();
                try
                {
                    var response = await QuotasRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List quotas for the given workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/quotas
        /// Operation Id: Quotas_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Quota" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Quota> GetAllQuota(CancellationToken cancellationToken = default)
        {
            Page<Quota> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = QuotasClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAllQuota");
                scope.Start();
                try
                {
                    var response = QuotasRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Quota> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = QuotasClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAllQuota");
                scope.Start();
                try
                {
                    var response = QuotasRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List sessions.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions
        /// Operation Id: Sessions_List
        /// </summary>
        /// <param name="filter"> OData filter expression supporting eq operator on id, name, providerId, target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime. </param>
        /// <param name="maxpagesize"> The maxpagesize parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SessionDetails" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SessionDetails> GetSessionsAsync(string filter = null, long? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<SessionDetails>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SessionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetSessions");
                scope.Start();
                try
                {
                    var response = await SessionsRestClient.ListAsync(Id.SubscriptionId, filter, pageSizeHint, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SessionDetails>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SessionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetSessions");
                scope.Start();
                try
                {
                    var response = await SessionsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, filter, pageSizeHint, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List sessions.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions
        /// Operation Id: Sessions_List
        /// </summary>
        /// <param name="filter"> OData filter expression supporting eq operator on id, name, providerId, target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime. </param>
        /// <param name="maxpagesize"> The maxpagesize parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SessionDetails" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SessionDetails> GetSessions(string filter = null, long? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Page<SessionDetails> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SessionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetSessions");
                scope.Start();
                try
                {
                    var response = SessionsRestClient.List(Id.SubscriptionId, filter, pageSizeHint, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SessionDetails> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SessionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetSessions");
                scope.Start();
                try
                {
                    var response = SessionsRestClient.ListNextPage(nextLink, Id.SubscriptionId, filter, pageSizeHint, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get session by id
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}
        /// Operation Id: Sessions_Get
        /// </summary>
        /// <param name="sessionId"> Id of the session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SessionDetails>> GetSessionAsync(string sessionId, CancellationToken cancellationToken = default)
        {
            using var scope = SessionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetSession");
            scope.Start();
            try
            {
                var response = await SessionsRestClient.GetAsync(Id.SubscriptionId, sessionId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get session by id
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}
        /// Operation Id: Sessions_Get
        /// </summary>
        /// <param name="sessionId"> Id of the session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SessionDetails> GetSession(string sessionId, CancellationToken cancellationToken = default)
        {
            using var scope = SessionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetSession");
            scope.Start();
            try
            {
                var response = SessionsRestClient.Get(Id.SubscriptionId, sessionId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a session.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}
        /// Operation Id: Sessions_Create
        /// </summary>
        /// <param name="sessionId"> Id of the session. </param>
        /// <param name="details"> The complete metadata of the session to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SessionDetails>> CreateSessionAsync(string sessionId, SessionDetails details, CancellationToken cancellationToken = default)
        {
            using var scope = SessionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.CreateSession");
            scope.Start();
            try
            {
                var response = await SessionsRestClient.CreateAsync(Id.SubscriptionId, sessionId, details, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a session.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}
        /// Operation Id: Sessions_Create
        /// </summary>
        /// <param name="sessionId"> Id of the session. </param>
        /// <param name="details"> The complete metadata of the session to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SessionDetails> CreateSession(string sessionId, SessionDetails details, CancellationToken cancellationToken = default)
        {
            using var scope = SessionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.CreateSession");
            scope.Start();
            try
            {
                var response = SessionsRestClient.Create(Id.SubscriptionId, sessionId, details, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// End a session
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}:end
        /// Operation Id: Sessions_End
        /// </summary>
        /// <param name="sessionId"> Id of the session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SessionDetails>> EndSessionAsync(string sessionId, CancellationToken cancellationToken = default)
        {
            using var scope = SessionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.EndSession");
            scope.Start();
            try
            {
                var response = await SessionsRestClient.EndAsync(Id.SubscriptionId, sessionId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// End a session
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}:end
        /// Operation Id: Sessions_End
        /// </summary>
        /// <param name="sessionId"> Id of the session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SessionDetails> EndSession(string sessionId, CancellationToken cancellationToken = default)
        {
            using var scope = SessionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.EndSession");
            scope.Start();
            try
            {
                var response = SessionsRestClient.End(Id.SubscriptionId, sessionId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List jobs in a session.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}/jobs
        /// Operation Id: Sessions_JobsList
        /// </summary>
        /// <param name="sessionId"> Id of the session. </param>
        /// <param name="filter"> OData filter expression supporting eq operator on id, name, providerId, target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime. </param>
        /// <param name="maxpagesize"> The maxpagesize parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="JobDetails" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<JobDetails> JobsListSessionsAsync(string sessionId, string filter = null, long? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<JobDetails>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SessionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.JobsListSessions");
                scope.Start();
                try
                {
                    var response = await SessionsRestClient.JobsListAsync(Id.SubscriptionId, sessionId, filter, pageSizeHint, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<JobDetails>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SessionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.JobsListSessions");
                scope.Start();
                try
                {
                    var response = await SessionsRestClient.JobsListNextPageAsync(nextLink, Id.SubscriptionId, sessionId, filter, pageSizeHint, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List jobs in a session.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}/jobs
        /// Operation Id: Sessions_JobsList
        /// </summary>
        /// <param name="sessionId"> Id of the session. </param>
        /// <param name="filter"> OData filter expression supporting eq operator on id, name, providerId, target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime. </param>
        /// <param name="maxpagesize"> The maxpagesize parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="JobDetails" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<JobDetails> JobsListSessions(string sessionId, string filter = null, long? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Page<JobDetails> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SessionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.JobsListSessions");
                scope.Start();
                try
                {
                    var response = SessionsRestClient.JobsList(Id.SubscriptionId, sessionId, filter, pageSizeHint, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<JobDetails> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SessionsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.JobsListSessions");
                scope.Start();
                try
                {
                    var response = SessionsRestClient.JobsListNextPage(nextLink, Id.SubscriptionId, sessionId, filter, pageSizeHint, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List top-level items.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/topLevelItems
        /// Operation Id: TopLevelItems_List
        /// </summary>
        /// <param name="filter"> OData filter expression supporting eq operator on id, name, providerId, target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime. </param>
        /// <param name="maxpagesize"> The maxpagesize parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ItemDetails" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ItemDetails> GetTopLevelItemsAsync(string filter = null, long? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ItemDetails>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = TopLevelItemsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetTopLevelItems");
                scope.Start();
                try
                {
                    var response = await TopLevelItemsRestClient.ListAsync(Id.SubscriptionId, filter, pageSizeHint, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ItemDetails>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = TopLevelItemsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetTopLevelItems");
                scope.Start();
                try
                {
                    var response = await TopLevelItemsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, filter, pageSizeHint, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List top-level items.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/topLevelItems
        /// Operation Id: TopLevelItems_List
        /// </summary>
        /// <param name="filter"> OData filter expression supporting eq operator on id, name, providerId, target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime. </param>
        /// <param name="maxpagesize"> The maxpagesize parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ItemDetails" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ItemDetails> GetTopLevelItems(string filter = null, long? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Page<ItemDetails> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = TopLevelItemsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetTopLevelItems");
                scope.Start();
                try
                {
                    var response = TopLevelItemsRestClient.List(Id.SubscriptionId, filter, pageSizeHint, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ItemDetails> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = TopLevelItemsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetTopLevelItems");
                scope.Start();
                try
                {
                    var response = TopLevelItemsRestClient.ListNextPage(nextLink, Id.SubscriptionId, filter, pageSizeHint, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
