// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Quantum.Jobs.Models;
using Azure.ResourceManager.Resources;

namespace Azure.Quantum.Jobs
{
    /// <summary> A class to add extension methods to Azure.Quantum.Jobs. </summary>
    public static partial class JobsExtensions
    {
        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary>
        /// List jobs.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs
        /// Operation Id: Jobs_List
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="filter"> OData filter expression supporting eq operator on id, name, providerId, target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime. </param>
        /// <param name="maxpagesize"> The maxpagesize parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="JobDetails" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<JobDetails> GetJobsAsync(this ResourceGroupResource resourceGroupResource, string filter = null, long? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroupResource).GetJobsAsync(filter, maxpagesize, cancellationToken);
        }

        /// <summary>
        /// List jobs.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs
        /// Operation Id: Jobs_List
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="filter"> OData filter expression supporting eq operator on id, name, providerId, target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime. </param>
        /// <param name="maxpagesize"> The maxpagesize parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="JobDetails" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<JobDetails> GetJobs(this ResourceGroupResource resourceGroupResource, string filter = null, long? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroupResource).GetJobs(filter, maxpagesize, cancellationToken);
        }

        /// <summary>
        /// Get job by id
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}
        /// Operation Id: Jobs_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public static async Task<Response<JobDetails>> GetJobAsync(this ResourceGroupResource resourceGroupResource, string jobId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            return await GetExtensionClient(resourceGroupResource).GetJobAsync(jobId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get job by id
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}
        /// Operation Id: Jobs_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public static Response<JobDetails> GetJob(this ResourceGroupResource resourceGroupResource, string jobId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            return GetExtensionClient(resourceGroupResource).GetJob(jobId, cancellationToken);
        }

        /// <summary>
        /// Create a job.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}
        /// Operation Id: Jobs_Create
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="details"> The complete metadata of the job to submit. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="details"/> is null. </exception>
        public static async Task<Response<JobDetails>> CreateJobAsync(this ResourceGroupResource resourceGroupResource, string jobId, JobDetails details, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(details, nameof(details));

            return await GetExtensionClient(resourceGroupResource).CreateJobAsync(jobId, details, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a job.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}
        /// Operation Id: Jobs_Create
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="details"> The complete metadata of the job to submit. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="details"/> is null. </exception>
        public static Response<JobDetails> CreateJob(this ResourceGroupResource resourceGroupResource, string jobId, JobDetails details, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(details, nameof(details));

            return GetExtensionClient(resourceGroupResource).CreateJob(jobId, details, cancellationToken);
        }

        /// <summary>
        /// Cancel a job.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}
        /// Operation Id: Jobs_Cancel
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public static async Task<Response> CancelJobAsync(this ResourceGroupResource resourceGroupResource, string jobId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            return await GetExtensionClient(resourceGroupResource).CancelJobAsync(jobId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel a job.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}
        /// Operation Id: Jobs_Cancel
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        public static Response CancelJob(this ResourceGroupResource resourceGroupResource, string jobId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            return GetExtensionClient(resourceGroupResource).CancelJob(jobId, cancellationToken);
        }

        /// <summary>
        /// Patch a job.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}
        /// Operation Id: Jobs_Patch
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="content"> The json patch document containing the patch operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        public static async Task<Response<JobDetails>> PatchJobAsync(this ResourceGroupResource resourceGroupResource, string jobId, IEnumerable<Models.JsonPatchDocument> content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(content, nameof(content));

            return await GetExtensionClient(resourceGroupResource).PatchJobAsync(jobId, content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Patch a job.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}
        /// Operation Id: Jobs_Patch
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="content"> The json patch document containing the patch operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        public static Response<JobDetails> PatchJob(this ResourceGroupResource resourceGroupResource, string jobId, IEnumerable<Models.JsonPatchDocument> content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(content, nameof(content));

            return GetExtensionClient(resourceGroupResource).PatchJob(jobId, content, cancellationToken);
        }

        /// <summary>
        /// Get provider status.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/providerStatus
        /// Operation Id: Providers_GetStatus
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ProviderStatus" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ProviderStatus> GetStatusProvidersAsync(this ResourceGroupResource resourceGroupResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroupResource).GetStatusProvidersAsync(cancellationToken);
        }

        /// <summary>
        /// Get provider status.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/providerStatus
        /// Operation Id: Providers_GetStatus
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ProviderStatus" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ProviderStatus> GetStatusProviders(this ResourceGroupResource resourceGroupResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroupResource).GetStatusProviders(cancellationToken);
        }

        /// <summary>
        /// Gets a URL with SAS token for a container/blob in the storage account associated with the workspace. The SAS URL can be used to upload job input and/or download job output.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/storage/sasUri
        /// Operation Id: Storage_SasUri
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="details"> The details (name and container) of the blob to store or download data. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="details"/> is null. </exception>
        public static async Task<Response<SasUriResponse>> SasUriStorageAsync(this ResourceGroupResource resourceGroupResource, BlobDetails details, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(details, nameof(details));

            return await GetExtensionClient(resourceGroupResource).SasUriStorageAsync(details, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a URL with SAS token for a container/blob in the storage account associated with the workspace. The SAS URL can be used to upload job input and/or download job output.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/storage/sasUri
        /// Operation Id: Storage_SasUri
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="details"> The details (name and container) of the blob to store or download data. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="details"/> is null. </exception>
        public static Response<SasUriResponse> SasUriStorage(this ResourceGroupResource resourceGroupResource, BlobDetails details, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(details, nameof(details));

            return GetExtensionClient(resourceGroupResource).SasUriStorage(details, cancellationToken);
        }

        /// <summary>
        /// List quotas for the given workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/quotas
        /// Operation Id: Quotas_List
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Quota" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<Quota> GetAllQuotaAsync(this ResourceGroupResource resourceGroupResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroupResource).GetAllQuotaAsync(cancellationToken);
        }

        /// <summary>
        /// List quotas for the given workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/quotas
        /// Operation Id: Quotas_List
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Quota" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<Quota> GetAllQuota(this ResourceGroupResource resourceGroupResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroupResource).GetAllQuota(cancellationToken);
        }

        /// <summary>
        /// List sessions.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions
        /// Operation Id: Sessions_List
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="filter"> OData filter expression supporting eq operator on id, name, providerId, target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime. </param>
        /// <param name="maxpagesize"> The maxpagesize parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SessionDetails" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SessionDetails> GetSessionsAsync(this ResourceGroupResource resourceGroupResource, string filter = null, long? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroupResource).GetSessionsAsync(filter, maxpagesize, cancellationToken);
        }

        /// <summary>
        /// List sessions.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions
        /// Operation Id: Sessions_List
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="filter"> OData filter expression supporting eq operator on id, name, providerId, target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime. </param>
        /// <param name="maxpagesize"> The maxpagesize parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SessionDetails" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SessionDetails> GetSessions(this ResourceGroupResource resourceGroupResource, string filter = null, long? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroupResource).GetSessions(filter, maxpagesize, cancellationToken);
        }

        /// <summary>
        /// Get session by id
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}
        /// Operation Id: Sessions_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="sessionId"> Id of the session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        public static async Task<Response<SessionDetails>> GetSessionAsync(this ResourceGroupResource resourceGroupResource, string sessionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(sessionId, nameof(sessionId));

            return await GetExtensionClient(resourceGroupResource).GetSessionAsync(sessionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get session by id
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}
        /// Operation Id: Sessions_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="sessionId"> Id of the session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        public static Response<SessionDetails> GetSession(this ResourceGroupResource resourceGroupResource, string sessionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(sessionId, nameof(sessionId));

            return GetExtensionClient(resourceGroupResource).GetSession(sessionId, cancellationToken);
        }

        /// <summary>
        /// Create a session.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}
        /// Operation Id: Sessions_Create
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="sessionId"> Id of the session. </param>
        /// <param name="details"> The complete metadata of the session to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> or <paramref name="details"/> is null. </exception>
        public static async Task<Response<SessionDetails>> CreateSessionAsync(this ResourceGroupResource resourceGroupResource, string sessionId, SessionDetails details, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(sessionId, nameof(sessionId));
            Argument.AssertNotNull(details, nameof(details));

            return await GetExtensionClient(resourceGroupResource).CreateSessionAsync(sessionId, details, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a session.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}
        /// Operation Id: Sessions_Create
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="sessionId"> Id of the session. </param>
        /// <param name="details"> The complete metadata of the session to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> or <paramref name="details"/> is null. </exception>
        public static Response<SessionDetails> CreateSession(this ResourceGroupResource resourceGroupResource, string sessionId, SessionDetails details, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(sessionId, nameof(sessionId));
            Argument.AssertNotNull(details, nameof(details));

            return GetExtensionClient(resourceGroupResource).CreateSession(sessionId, details, cancellationToken);
        }

        /// <summary>
        /// End a session
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}:end
        /// Operation Id: Sessions_End
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="sessionId"> Id of the session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        public static async Task<Response<SessionDetails>> EndSessionAsync(this ResourceGroupResource resourceGroupResource, string sessionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(sessionId, nameof(sessionId));

            return await GetExtensionClient(resourceGroupResource).EndSessionAsync(sessionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// End a session
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}:end
        /// Operation Id: Sessions_End
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="sessionId"> Id of the session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        public static Response<SessionDetails> EndSession(this ResourceGroupResource resourceGroupResource, string sessionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(sessionId, nameof(sessionId));

            return GetExtensionClient(resourceGroupResource).EndSession(sessionId, cancellationToken);
        }

        /// <summary>
        /// List jobs in a session.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}/jobs
        /// Operation Id: Sessions_JobsList
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="sessionId"> Id of the session. </param>
        /// <param name="filter"> OData filter expression supporting eq operator on id, name, providerId, target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime. </param>
        /// <param name="maxpagesize"> The maxpagesize parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        /// <returns> An async collection of <see cref="JobDetails" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<JobDetails> JobsListSessionsAsync(this ResourceGroupResource resourceGroupResource, string sessionId, string filter = null, long? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(sessionId, nameof(sessionId));

            return GetExtensionClient(resourceGroupResource).JobsListSessionsAsync(sessionId, filter, maxpagesize, cancellationToken);
        }

        /// <summary>
        /// List jobs in a session.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}/jobs
        /// Operation Id: Sessions_JobsList
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="sessionId"> Id of the session. </param>
        /// <param name="filter"> OData filter expression supporting eq operator on id, name, providerId, target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime. </param>
        /// <param name="maxpagesize"> The maxpagesize parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        /// <returns> A collection of <see cref="JobDetails" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<JobDetails> JobsListSessions(this ResourceGroupResource resourceGroupResource, string sessionId, string filter = null, long? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(sessionId, nameof(sessionId));

            return GetExtensionClient(resourceGroupResource).JobsListSessions(sessionId, filter, maxpagesize, cancellationToken);
        }

        /// <summary>
        /// List top-level items.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/topLevelItems
        /// Operation Id: TopLevelItems_List
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="filter"> OData filter expression supporting eq operator on id, name, providerId, target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime. </param>
        /// <param name="maxpagesize"> The maxpagesize parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ItemDetails" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ItemDetails> GetTopLevelItemsAsync(this ResourceGroupResource resourceGroupResource, string filter = null, long? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroupResource).GetTopLevelItemsAsync(filter, maxpagesize, cancellationToken);
        }

        /// <summary>
        /// List top-level items.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/topLevelItems
        /// Operation Id: TopLevelItems_List
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="filter"> OData filter expression supporting eq operator on id, name, providerId, target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime. </param>
        /// <param name="maxpagesize"> The maxpagesize parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ItemDetails" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ItemDetails> GetTopLevelItems(this ResourceGroupResource resourceGroupResource, string filter = null, long? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroupResource).GetTopLevelItems(filter, maxpagesize, cancellationToken);
        }
    }
}
