// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Quantum.Jobs.Models
{
    /// <summary> The status of the session. </summary>
    public readonly partial struct SessionStatus : IEquatable<SessionStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SessionStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SessionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WaitingValue = "Waiting";
        private const string ExecutingValue = "Executing";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string FailureSValue = "Failure(s)";
        private const string TimedOutValue = "TimedOut";

        /// <summary> Waiting. </summary>
        public static SessionStatus Waiting { get; } = new SessionStatus(WaitingValue);
        /// <summary> Executing. </summary>
        public static SessionStatus Executing { get; } = new SessionStatus(ExecutingValue);
        /// <summary> Succeeded. </summary>
        public static SessionStatus Succeeded { get; } = new SessionStatus(SucceededValue);
        /// <summary> Failed. </summary>
        public static SessionStatus Failed { get; } = new SessionStatus(FailedValue);
        /// <summary> Failure(s). </summary>
        public static SessionStatus FailureS { get; } = new SessionStatus(FailureSValue);
        /// <summary> TimedOut. </summary>
        public static SessionStatus TimedOut { get; } = new SessionStatus(TimedOutValue);
        /// <summary> Determines if two <see cref="SessionStatus"/> values are the same. </summary>
        public static bool operator ==(SessionStatus left, SessionStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SessionStatus"/> values are not the same. </summary>
        public static bool operator !=(SessionStatus left, SessionStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SessionStatus"/>. </summary>
        public static implicit operator SessionStatus(string value) => new SessionStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SessionStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SessionStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
