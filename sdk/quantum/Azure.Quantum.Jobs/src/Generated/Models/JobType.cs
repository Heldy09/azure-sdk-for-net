// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Quantum.Jobs.Models
{
    /// <summary> The type of job. </summary>
    public readonly partial struct JobType : IEquatable<JobType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="JobType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public JobType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string QuantumComputingValue = "QuantumComputing";
        private const string QuantumComputingBatchValue = "QuantumComputingBatch";
        private const string OptimizationValue = "Optimization";

        /// <summary> Unknown. </summary>
        public static JobType Unknown { get; } = new JobType(UnknownValue);
        /// <summary> QuantumComputing. </summary>
        public static JobType QuantumComputing { get; } = new JobType(QuantumComputingValue);
        /// <summary> QuantumComputingBatch. </summary>
        public static JobType QuantumComputingBatch { get; } = new JobType(QuantumComputingBatchValue);
        /// <summary> Optimization. </summary>
        public static JobType Optimization { get; } = new JobType(OptimizationValue);
        /// <summary> Determines if two <see cref="JobType"/> values are the same. </summary>
        public static bool operator ==(JobType left, JobType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="JobType"/> values are not the same. </summary>
        public static bool operator !=(JobType left, JobType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="JobType"/>. </summary>
        public static implicit operator JobType(string value) => new JobType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is JobType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(JobType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
