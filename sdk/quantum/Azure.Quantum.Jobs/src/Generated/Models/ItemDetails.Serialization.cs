// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.Quantum.Jobs.Models
{
    public partial class ItemDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("id");
            writer.WriteStringValue(Id);
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            writer.WritePropertyName("providerId");
            writer.WriteStringValue(ProviderId);
            writer.WritePropertyName("target");
            writer.WriteStringValue(Target);
            writer.WritePropertyName("itemType");
            writer.WriteStringValue(ItemType.ToString());
            if (Optional.IsDefined(CostEstimate))
            {
                writer.WritePropertyName("costEstimate");
                writer.WriteObjectValue(CostEstimate);
            }
            if (Optional.IsDefined(ErrorData))
            {
                writer.WritePropertyName("errorData");
                writer.WriteObjectValue(ErrorData);
            }
            writer.WriteEndObject();
        }

        internal static ItemDetails DeserializeItemDetails(JsonElement element)
        {
            if (element.TryGetProperty("itemType", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "Session": return SessionDetails.DeserializeSessionDetails(element);
                    case "Job": return JobDetails.DeserializeJobDetails(element);
                }
            }
            string id = default;
            string name = default;
            string providerId = default;
            string target = default;
            ItemType itemType = default;
            Optional<DateTimeOffset> creationTime = default;
            Optional<DateTimeOffset> beginExecutionTime = default;
            Optional<DateTimeOffset> endExecutionTime = default;
            Optional<CostEstimate> costEstimate = default;
            Optional<ErrorData> errorData = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("providerId"))
                {
                    providerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("target"))
                {
                    target = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("itemType"))
                {
                    itemType = new ItemType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("creationTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    creationTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("beginExecutionTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    beginExecutionTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endExecutionTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    endExecutionTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("costEstimate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    costEstimate = CostEstimate.DeserializeCostEstimate(property.Value);
                    continue;
                }
                if (property.NameEquals("errorData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    errorData = ErrorData.DeserializeErrorData(property.Value);
                    continue;
                }
            }
            return new UnknownItemDetails(id, name, providerId, target, itemType, Optional.ToNullable(creationTime), Optional.ToNullable(beginExecutionTime), Optional.ToNullable(endExecutionTime), costEstimate.Value, errorData.Value);
        }
    }
}
