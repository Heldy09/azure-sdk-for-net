// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Quantum.Jobs.Models
{
    /// <summary> Job details. </summary>
    public partial class JobDetails : ItemDetails
    {
        /// <summary> Initializes a new instance of JobDetails. </summary>
        /// <param name="id"> The id of the item. </param>
        /// <param name="name"> The name of the item. It is not required for the name to be unique and it&apos;s only used for display purposes. </param>
        /// <param name="providerId"> The unique identifier for the provider. </param>
        /// <param name="target"> The target identifier to run the job. </param>
        /// <param name="containerUri"> The blob container SAS uri, the container is used to host job data. </param>
        /// <param name="inputDataFormat"> The format of the input data. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="name"/>, <paramref name="providerId"/>, <paramref name="target"/>, <paramref name="containerUri"/> or <paramref name="inputDataFormat"/> is null. </exception>
        public JobDetails(string id, string name, string providerId, string target, string containerUri, string inputDataFormat) : base(id, name, providerId, target)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (providerId == null)
            {
                throw new ArgumentNullException(nameof(providerId));
            }
            if (target == null)
            {
                throw new ArgumentNullException(nameof(target));
            }
            if (containerUri == null)
            {
                throw new ArgumentNullException(nameof(containerUri));
            }
            if (inputDataFormat == null)
            {
                throw new ArgumentNullException(nameof(inputDataFormat));
            }

            ContainerUri = containerUri;
            InputDataFormat = inputDataFormat;
            Metadata = new ChangeTrackingDictionary<string, string>();
            Tags = new ChangeTrackingList<string>();
            ItemType = ItemType.Job;
        }

        /// <summary> Initializes a new instance of JobDetails. </summary>
        /// <param name="id"> The id of the item. </param>
        /// <param name="name"> The name of the item. It is not required for the name to be unique and it&apos;s only used for display purposes. </param>
        /// <param name="providerId"> The unique identifier for the provider. </param>
        /// <param name="target"> The target identifier to run the job. </param>
        /// <param name="itemType"> The type of item. </param>
        /// <param name="createdOn"> The creation time of the item. </param>
        /// <param name="beginExecutionOn"> The time when the item began execution. </param>
        /// <param name="endExecutionOn"> The time when the item finished execution. </param>
        /// <param name="costEstimate"> The job cost billed by the provider. The final cost on your bill might be slightly different due to added taxes and currency conversion rates. </param>
        /// <param name="errorData"> An error response from Azure. </param>
        /// <param name="jobType"> The type of job. </param>
        /// <param name="sessionId"> The ID of the session that the job is part of. </param>
        /// <param name="containerUri"> The blob container SAS uri, the container is used to host job data. </param>
        /// <param name="inputDataUri"> The input blob SAS uri, if specified, it will override the default input blob in the container. </param>
        /// <param name="inputDataFormat"> The format of the input data. </param>
        /// <param name="inputParams"> The input parameters for the job. JSON object used by the target solver. It is expected that the size of this object is small and only used to specify parameters for the execution target, not the input data. </param>
        /// <param name="status"> The status of the job. </param>
        /// <param name="metadata"> The job metadata. Metadata provides client the ability to store client-specific information. </param>
        /// <param name="outputDataUri"> The output blob SAS uri. When a job finishes successfully, results will be uploaded to this blob. </param>
        /// <param name="outputDataFormat"> The format of the output data. </param>
        /// <param name="cancellationOn"> The time when a job was successfully cancelled. </param>
        /// <param name="quantumComputingData"> Quantum computing data. </param>
        /// <param name="tags"> List of user-supplied tags associated with the job. </param>
        internal JobDetails(string id, string name, string providerId, string target, ItemType itemType, DateTimeOffset? createdOn, DateTimeOffset? beginExecutionOn, DateTimeOffset? endExecutionOn, CostEstimate costEstimate, ErrorData errorData, JobType? jobType, string sessionId, string containerUri, string inputDataUri, string inputDataFormat, BinaryData inputParams, JobStatus? status, IDictionary<string, string> metadata, string outputDataUri, string outputDataFormat, DateTimeOffset? cancellationOn, QuantumComputingData quantumComputingData, IList<string> tags) : base(id, name, providerId, target, itemType, createdOn, beginExecutionOn, endExecutionOn, costEstimate, errorData)
        {
            JobType = jobType;
            SessionId = sessionId;
            ContainerUri = containerUri;
            InputDataUri = inputDataUri;
            InputDataFormat = inputDataFormat;
            InputParams = inputParams;
            Status = status;
            Metadata = metadata;
            OutputDataUri = outputDataUri;
            OutputDataFormat = outputDataFormat;
            CancellationOn = cancellationOn;
            QuantumComputingData = quantumComputingData;
            Tags = tags;
            ItemType = itemType;
        }

        /// <summary> The type of job. </summary>
        public JobType? JobType { get; }
        /// <summary> The ID of the session that the job is part of. </summary>
        public string SessionId { get; set; }
        /// <summary> The blob container SAS uri, the container is used to host job data. </summary>
        public string ContainerUri { get; set; }
        /// <summary> The input blob SAS uri, if specified, it will override the default input blob in the container. </summary>
        public string InputDataUri { get; set; }
        /// <summary> The format of the input data. </summary>
        public string InputDataFormat { get; set; }
        /// <summary>
        /// The input parameters for the job. JSON object used by the target solver. It is expected that the size of this object is small and only used to specify parameters for the execution target, not the input data.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData InputParams { get; set; }
        /// <summary> The status of the job. </summary>
        public JobStatus? Status { get; }
        /// <summary> The job metadata. Metadata provides client the ability to store client-specific information. </summary>
        public IDictionary<string, string> Metadata { get; }
        /// <summary> The output blob SAS uri. When a job finishes successfully, results will be uploaded to this blob. </summary>
        public string OutputDataUri { get; set; }
        /// <summary> The format of the output data. </summary>
        public string OutputDataFormat { get; set; }
        /// <summary> The time when a job was successfully cancelled. </summary>
        public DateTimeOffset? CancellationOn { get; }
        /// <summary> Quantum computing data. </summary>
        internal QuantumComputingData QuantumComputingData { get; }
        /// <summary> The number of quantum computing items in the job. </summary>
        public long? QuantumComputingDataCount
        {
            get => QuantumComputingData?.Count;
        }

        /// <summary> List of user-supplied tags associated with the job. </summary>
        public IList<string> Tags { get; }
    }
}
