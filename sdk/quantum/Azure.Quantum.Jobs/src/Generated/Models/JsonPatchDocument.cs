// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Quantum.Jobs.Models
{
    /// <summary> A JSONPatch document as defined by RFC 6902. </summary>
    public partial class JsonPatchDocument
    {
        /// <summary> Initializes a new instance of JsonPatchDocument. </summary>
        /// <param name="op"> The operation to be performed. </param>
        /// <param name="path"> A JSON-Pointer. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="path"/> is null. </exception>
        public JsonPatchDocument(JsonPatchOperation op, string path)
        {
            if (path == null)
            {
                throw new ArgumentNullException(nameof(path));
            }

            Op = op;
            Path = path;
        }

        /// <summary> The operation to be performed. </summary>
        public JsonPatchOperation Op { get; }
        /// <summary> A JSON-Pointer. </summary>
        public string Path { get; }
        /// <summary>
        /// A value to be used in the operation on the path.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Value { get; set; }
        /// <summary> Optional field used in copy and move operations. </summary>
        public string From { get; set; }
    }
}
